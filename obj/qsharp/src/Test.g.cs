//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProjectTest\",\"Name\":\"TestSumOptions\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":8,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs\",\"Position\":{\"Item1\":9,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProjectTest\",\"Name\":\"TestSumOptions\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs\",\"Position\":{\"Item1\":9,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProjectTest\",\"Name\":\"TestFindSumConstraints\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":27,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProjectTest\",\"Name\":\"TestFindSumConstraints\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProjectTest\",\"Name\":\"TestApplyVariableValuesOracles\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":48,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs\",\"Position\":{\"Item1\":49,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":41}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProjectTest\",\"Name\":\"TestApplyVariableValuesOracles\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs\",\"Position\":{\"Item1\":49,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":41}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProjectTest\",\"Name\":\"TestSolvePuzzle\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":61,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs\",\"Position\":{\"Item1\":62,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProjectTest\",\"Name\":\"TestSolvePuzzle\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs\",\"Position\":{\"Item1\":62,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProjectTest\",\"Name\":\"TestIsKakuroSolutionValid\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":80,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs\",\"Position\":{\"Item1\":81,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProjectTest\",\"Name\":\"TestIsKakuroSolutionValid\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs\",\"Position\":{\"Item1\":81,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"Documentation\":[]}")]
#line hidden
namespace Quantum.Week1_StandaloneProjectTest
{
    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs", OperationFunctor.Body, 10, 29)]
    public partial class TestSumOptions : Operation<QVoid, QVoid>, ICallable
    {
        public TestSumOptions(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "TestSumOptions")]
            public void TestSumOptions()
#line 10 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<TestSumOptions, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 10 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "TestSumOptions";
        String ICallable.FullName => "Quantum.Week1_StandaloneProjectTest.TestSumOptions";
        protected ICallable<(IQArray<Int64>,Int64), Quantum.Week1_StandaloneProject.SEC> Quantum__Week1_StandaloneProject__SEC
        {
            get;
            set;
        }

        protected ICallable<Quantum.Week1_StandaloneProject.SEC, IQArray<IQArray<Int64>>> Quantum__Week1_StandaloneProject__SumOptions
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,IQArray<Int64>,String), QVoid> Microsoft__Quantum__Diagnostics__AllEqualityFactI
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 11 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var constraint1 = new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(2L, 3L, 4L), 3L));
#line 12 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var constraint2 = new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(0L, 1L), 1L));
#line 13 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var expectedOptions1 = (IQArray<IQArray<Int64>>)new QArray<IQArray<Int64>>(new QArray<Int64>(2L, 0L, 1L), new QArray<Int64>(0L, 2L, 1L), new QArray<Int64>(0L, 1L, 2L), new QArray<Int64>(2L, 1L, 0L), new QArray<Int64>(1L, 2L, 0L), new QArray<Int64>(1L, 0L, 2L), new QArray<Int64>(1L, 0L, 2L), new QArray<Int64>(0L, 1L, 2L), new QArray<Int64>(0L, 2L, 1L), new QArray<Int64>(1L, 2L, 0L), new QArray<Int64>(2L, 1L, 0L), new QArray<Int64>(2L, 0L, 1L), new QArray<Int64>(0L, 1L, 2L), new QArray<Int64>(1L, 0L, 2L), new QArray<Int64>(1L, 2L, 0L), new QArray<Int64>(0L, 2L, 1L), new QArray<Int64>(2L, 0L, 1L), new QArray<Int64>(2L, 1L, 0L));
#line 15 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var expectedOptions2 = (IQArray<IQArray<Int64>>)new QArray<IQArray<Int64>>(new QArray<Int64>(0L, 1L), new QArray<Int64>(1L, 0L));
#line 16 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var sumOptions1 = (IQArray<IQArray<Int64>>)Quantum__Week1_StandaloneProject__SumOptions.Apply(constraint1);
#line 17 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var sumOptions2 = (IQArray<IQArray<Int64>>)Quantum__Week1_StandaloneProject__SumOptions.Apply(constraint2);
#line 18 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            Message__.Apply(String.Format("Sum options for constraint {0} are {1}", constraint1, sumOptions1));
#line 19 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            Message__.Apply(String.Format("Sum options for constraint {0} are {1}", constraint2, sumOptions2));
#line 20 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            foreach (var i in new QRange(0L, (expectedOptions1.Length - 1L)))
#line hidden
            {
#line 21 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                Microsoft__Quantum__Diagnostics__AllEqualityFactI.Apply((sumOptions1[i], expectedOptions1[i], String.Format("Sum option is wrong: actual {0}, expected {1}", sumOptions1[i], expectedOptions1[i])));
            }

#line 23 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            foreach (var i in new QRange(0L, (expectedOptions2.Length - 1L)))
#line hidden
            {
#line 24 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                Microsoft__Quantum__Diagnostics__AllEqualityFactI.Apply((sumOptions2[i], expectedOptions2[i], String.Format("Sum option is wrong: actual {0}, expected {1}", sumOptions2[i], expectedOptions2[i])));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Quantum__Week1_StandaloneProject__SEC = this.__Factory__.Get<ICallable<(IQArray<Int64>,Int64), Quantum.Week1_StandaloneProject.SEC>>(typeof(global::Quantum.Week1_StandaloneProject.SEC));
            this.Quantum__Week1_StandaloneProject__SumOptions = this.__Factory__.Get<ICallable<Quantum.Week1_StandaloneProject.SEC, IQArray<IQArray<Int64>>>>(typeof(global::Quantum.Week1_StandaloneProject.SumOptions));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Diagnostics__AllEqualityFactI = this.__Factory__.Get<ICallable<(IQArray<Int64>,IQArray<Int64>,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.AllEqualityFactI));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TestSumOptions, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs", OperationFunctor.Body, 29, 50)]
    public partial class TestFindSumConstraints : Operation<QVoid, QVoid>, ICallable
    {
        public TestFindSumConstraints(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "TestFindSumConstraints")]
            public void TestFindSumConstraints()
#line 29 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<TestFindSumConstraints, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 29 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "TestFindSumConstraints";
        String ICallable.FullName => "Quantum.Week1_StandaloneProjectTest.TestFindSumConstraints";
        protected ICallable<(IQArray<Int64>,Int64), Quantum.Week1_StandaloneProject.SEC> Quantum__Week1_StandaloneProject__SEC
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Quantum.Week1_StandaloneProject.SEC>,Int64), IQArray<(Int64,Int64)>> Quantum__Week1_StandaloneProject__FindSumConstraints
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactI
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 30 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var nVariables = 7L;
#line 31 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var sumEqualityConstraints = (IQArray<Quantum.Week1_StandaloneProject.SEC>)new QArray<Quantum.Week1_StandaloneProject.SEC>(new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(0L, 1L), 3L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(0L, 2L), 5L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(1L, 3L, 5L), 3L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(2L, 3L, 4L), 5L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(4L, 6L), 1L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(5L, 6L), 1L)));
#line 39 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var sumConstraints = (IQArray<(Int64,Int64)>)Quantum__Week1_StandaloneProject__FindSumConstraints.Apply((sumEqualityConstraints, nVariables));
#line 40 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var expected = (IQArray<(Int64,Int64)>)new QArray<(Int64,Int64)>((0L, 0L), (0L, 1L), (1L, 3L), (2L, 0L), (2L, 1L), (3L, 1L), (3L, 3L), (4L, 1L), (4L, 2L), (4L, 3L), (5L, 2L), (5L, 3L), (6L, 2L), (6L, 3L));
#line 41 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            foreach (var i in new QRange(0L, (expected.Length - 1L)))
#line hidden
            {
#line 42 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                var (expI,expJ) = expected[i];
#line 43 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                var (sumConI,sumConJ) = sumConstraints[i];
#line 44 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((sumConI, expI, String.Format("Sum constraint {0} has wrong first index", i)));
#line 45 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((sumConJ, expJ, String.Format("Sum constraint {0} has wrong first index", i)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Quantum__Week1_StandaloneProject__SEC = this.__Factory__.Get<ICallable<(IQArray<Int64>,Int64), Quantum.Week1_StandaloneProject.SEC>>(typeof(global::Quantum.Week1_StandaloneProject.SEC));
            this.Quantum__Week1_StandaloneProject__FindSumConstraints = this.__Factory__.Get<ICallable<(IQArray<Quantum.Week1_StandaloneProject.SEC>,Int64), IQArray<(Int64,Int64)>>>(typeof(global::Quantum.Week1_StandaloneProject.FindSumConstraints));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Diagnostics__EqualityFactI = this.__Factory__.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactI));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TestFindSumConstraints, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs", OperationFunctor.Body, 50, 63)]
    public partial class TestApplyVariableValuesOracles : Operation<QVoid, QVoid>, ICallable
    {
        public TestApplyVariableValuesOracles(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "TestApplyVariableValuesOracles")]
            public void TestApplyVariableValuesOracles()
#line 50 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<TestApplyVariableValuesOracles, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 50 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "TestApplyVariableValuesOracles";
        String ICallable.FullName => "Quantum.Week1_StandaloneProjectTest.TestApplyVariableValuesOracles";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<(Pauli,Boolean,IQArray<Boolean>,IQArray<Qubit>)> Microsoft__Quantum__Canon__ApplyPauliFromBitString
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)> Quantum__Week1_StandaloneProject__ApplyVariableValuesOracles
        {
            get;
            set;
        }

        protected IUnitary<(Result,Qubit)> Microsoft__Quantum__Diagnostics__AssertQubit
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 51 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var nVariables = 7L;
#line 52 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var valueQubits = 2L;
#line 53 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var inequalityConstraints = (IQArray<(Int64,Int64)>)new QArray<(Int64,Int64)>((0L, 1L), (0L, 2L), (1L, 3L), (1L, 5L), (2L, 3L), (2L, 4L), (3L, 4L), (3L, 5L), (4L, 6L), (5L, 6L));
#line 54 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var variableValues = (IQArray<Boolean>)new QArray<Boolean>(true, false, false, true, true, true, true, false, false, false, false, false, false, true);
#line hidden
            {
#line 55 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                var (valueRegister,target) = (Allocate__.Apply((valueQubits * nVariables)), Allocate__.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 56 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                    Microsoft__Quantum__Canon__ApplyPauliFromBitString.Apply((Pauli.PauliX, true, variableValues, valueRegister));
#line 57 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                    Quantum__Week1_StandaloneProject__ApplyVariableValuesOracles.Apply((nVariables, valueQubits, inequalityConstraints, valueRegister, target));
#line 58 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                    Microsoft__Quantum__Diagnostics__AssertQubit.Apply((Result.One, target));
#line 59 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                    ResetAll__.Apply(QArray<Qubit>.Add(valueRegister, new QArray<Qubit>(target)));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(valueRegister);
#line hidden
                        Release__.Apply(target);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyPauliFromBitString = this.__Factory__.Get<IUnitary<(Pauli,Boolean,IQArray<Boolean>,IQArray<Qubit>)>>(typeof(global::Microsoft.Quantum.Canon.ApplyPauliFromBitString));
            this.Quantum__Week1_StandaloneProject__ApplyVariableValuesOracles = this.__Factory__.Get<IUnitary<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>>(typeof(global::Quantum.Week1_StandaloneProject.ApplyVariableValuesOracles));
            this.Microsoft__Quantum__Diagnostics__AssertQubit = this.__Factory__.Get<IUnitary<(Result,Qubit)>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertQubit));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TestApplyVariableValuesOracles, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs", OperationFunctor.Body, 63, 82)]
    public partial class TestSolvePuzzle : Operation<QVoid, QVoid>, ICallable
    {
        public TestSolvePuzzle(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "TestSolvePuzzle")]
            public void TestSolvePuzzle()
#line 63 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<TestSolvePuzzle, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 63 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "TestSolvePuzzle";
        String ICallable.FullName => "Quantum.Week1_StandaloneProjectTest.TestSolvePuzzle";
        protected ICallable<(IQArray<Int64>,Int64), Quantum.Week1_StandaloneProject.SEC> Quantum__Week1_StandaloneProject__SEC
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,(Int64,Int64),IQArray<(Int64,Int64)>,IQArray<Quantum.Week1_StandaloneProject.SEC>), (Boolean,IQArray<Int64>)> Quantum__Week1_StandaloneProject__SolvePuzzle
        {
            get;
            set;
        }

        protected ICallable<(Boolean,String), QVoid> Microsoft__Quantum__Diagnostics__Fact
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 64 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var size = (4L, 4L);
#line 65 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var nVariables = 7L;
#line 66 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var valueQubits = 2L;
#line 67 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var inequalityConstraints = (IQArray<(Int64,Int64)>)new QArray<(Int64,Int64)>((0L, 1L), (0L, 2L), (1L, 3L), (1L, 5L), (2L, 3L), (2L, 4L), (3L, 4L), (3L, 5L), (4L, 6L), (5L, 6L));
#line 68 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var sumEqualityConstraints = (IQArray<Quantum.Week1_StandaloneProject.SEC>)new QArray<Quantum.Week1_StandaloneProject.SEC>(new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(0L, 1L), 3L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(0L, 2L), 5L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(1L, 3L, 5L), 3L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(2L, 3L, 4L), 5L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(4L, 6L), 1L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(5L, 6L), 1L)));
#line 76 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var (isValid,result) = ((Boolean,IQArray<Int64>))Quantum__Week1_StandaloneProject__SolvePuzzle.Apply((nVariables, valueQubits, size, inequalityConstraints, sumEqualityConstraints));
#line 77 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            Microsoft__Quantum__Diagnostics__Fact.Apply((isValid, "Puzzle solution is not valid"));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Quantum__Week1_StandaloneProject__SEC = this.__Factory__.Get<ICallable<(IQArray<Int64>,Int64), Quantum.Week1_StandaloneProject.SEC>>(typeof(global::Quantum.Week1_StandaloneProject.SEC));
            this.Quantum__Week1_StandaloneProject__SolvePuzzle = this.__Factory__.Get<ICallable<(Int64,Int64,(Int64,Int64),IQArray<(Int64,Int64)>,IQArray<Quantum.Week1_StandaloneProject.SEC>), (Boolean,IQArray<Int64>)>>(typeof(global::Quantum.Week1_StandaloneProject.SolvePuzzle));
            this.Microsoft__Quantum__Diagnostics__Fact = this.__Factory__.Get<ICallable<(Boolean,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.Fact));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TestSolvePuzzle, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs", OperationFunctor.Body, 82, -1)]
    public partial class TestIsKakuroSolutionValid : Operation<QVoid, QVoid>, ICallable
    {
        public TestIsKakuroSolutionValid(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "TestIsKakuroSolutionValid")]
            public void TestIsKakuroSolutionValid()
#line 82 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<TestIsKakuroSolutionValid, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 82 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "TestIsKakuroSolutionValid";
        String ICallable.FullName => "Quantum.Week1_StandaloneProjectTest.TestIsKakuroSolutionValid";
        protected ICallable<(IQArray<Int64>,Int64), Quantum.Week1_StandaloneProject.SEC> Quantum__Week1_StandaloneProject__SEC
        {
            get;
            set;
        }

        protected ICallable<(IQArray<(Int64,Int64)>,IQArray<Quantum.Week1_StandaloneProject.SEC>,IQArray<Int64>), Boolean> Quantum__Week1_StandaloneProject__IsKakuroSolutionValid
        {
            get;
            set;
        }

        protected ICallable<(Boolean,String), QVoid> Microsoft__Quantum__Diagnostics__Fact
        {
            get;
            set;
        }

        protected ICallable<(Boolean,String), QVoid> Microsoft__Quantum__Diagnostics__Contradiction
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 83 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var inequalityConstraints = (IQArray<(Int64,Int64)>)new QArray<(Int64,Int64)>((0L, 1L), (0L, 2L), (1L, 3L), (1L, 5L), (2L, 3L), (2L, 4L), (3L, 4L), (3L, 5L), (4L, 6L), (5L, 6L));
#line 84 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var sumEqualityConstraints = (IQArray<Quantum.Week1_StandaloneProject.SEC>)new QArray<Quantum.Week1_StandaloneProject.SEC>(new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(0L, 1L), 3L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(0L, 2L), 5L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(1L, 3L, 5L), 3L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(2L, 3L, 4L), 5L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(4L, 6L), 1L)), new Quantum.Week1_StandaloneProject.SEC((new QArray<Int64>(5L, 6L), 1L)));
#line 92 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var validValues = (IQArray<Int64>)new QArray<Int64>(2L, 1L, 3L, 2L, 0L, 0L, 1L);
#line 93 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var invalidValues = (IQArray<Int64>)new QArray<Int64>(2L, 1L, 2L, 3L, 0L, 0L, 1L);
#line 94 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var isValid = Quantum__Week1_StandaloneProject__IsKakuroSolutionValid.Apply((inequalityConstraints, sumEqualityConstraints, validValues));
#line 95 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            var notValid = Quantum__Week1_StandaloneProject__IsKakuroSolutionValid.Apply((inequalityConstraints, sumEqualityConstraints, invalidValues));
#line 96 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            Microsoft__Quantum__Diagnostics__Fact.Apply((isValid, "Valid solution is showing as not valid"));
#line 97 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Test.qs"
            Microsoft__Quantum__Diagnostics__Contradiction.Apply((notValid, "Invalid solution is showing as valid"));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Quantum__Week1_StandaloneProject__SEC = this.__Factory__.Get<ICallable<(IQArray<Int64>,Int64), Quantum.Week1_StandaloneProject.SEC>>(typeof(global::Quantum.Week1_StandaloneProject.SEC));
            this.Quantum__Week1_StandaloneProject__IsKakuroSolutionValid = this.__Factory__.Get<ICallable<(IQArray<(Int64,Int64)>,IQArray<Quantum.Week1_StandaloneProject.SEC>,IQArray<Int64>), Boolean>>(typeof(global::Quantum.Week1_StandaloneProject.IsKakuroSolutionValid));
            this.Microsoft__Quantum__Diagnostics__Fact = this.__Factory__.Get<ICallable<(Boolean,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.Fact));
            this.Microsoft__Quantum__Diagnostics__Contradiction = this.__Factory__.Get<ICallable<(Boolean,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.Contradiction));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TestIsKakuroSolutionValid, QVoid, QVoid>(QVoid.Instance);
        }
    }
}