//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: TypeDeclaration("{\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SEC\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":9},\"Item2\":{\"Line\":1,\"Column\":12}},\"Type\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"Int\"}]]},\"TypeItems\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"Case\":\"Named\",\"Fields\":[{\"VariableName\":\"variables\",\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":16},\"Item2\":{\"Line\":1,\"Column\":25}}}]}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"Case\":\"Named\",\"Fields\":[{\"VariableName\":\"sum\",\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":34},\"Item2\":{\"Line\":1,\"Column\":37}}}]}]}]]},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"TypeConstructor\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SEC\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":9},\"Item2\":{\"Line\":1,\"Column\":12}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"variables\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":1}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sum\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":1}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SEC\",\"Range\":{\"Case\":\"Null\"}}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":true}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":true}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SEC\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":9},\"Item2\":{\"Line\":1,\"Column\":12}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"IsNumberPresentInArray\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":16,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"n\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"array\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":47}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]]},\"ReturnType\":{\"Case\":\"Bool\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"IsNumberPresentInArray\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":16,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"FindCommonElementsInArrays\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":21,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":36}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"array1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":37},\"Item2\":{\"Line\":1,\"Column\":43}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"array2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":58}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"FindCommonElementsInArrays\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":21,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":36}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"RemoveDuplicates\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":32,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"arr\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":30}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"RemoveDuplicates\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":32,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"GetLimitationConstraints\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":43,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":34}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"options\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"limitations\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":51},\"Item2\":{\"Line\":1,\"Column\":62}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"GetLimitationConstraints\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":43,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":34}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SumOptions\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":54,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"constriant\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SEC\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":36}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":31}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SEC\",\"Range\":{\"Case\":\"Null\"}}]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SumOptions\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":54,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"FindSumConstraints\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":85,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sumEqualityConstraints\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SEC\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":53},\"Item2\":{\"Line\":1,\"Column\":56}}]}}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":51}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nVariables\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":60},\"Item2\":{\"Line\":1,\"Column\":70}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SEC\",\"Range\":{\"Case\":\"Null\"}}]}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"FindSumConstraints\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":85,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"MeasureValue\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":124,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":25},\"Item2\":{\"Line\":1,\"Column\":33}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"MeasureValue\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":124,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"MeasureAllValues\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":129,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"valueQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":47},\"Item2\":{\"Line\":1,\"Column\":55}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"MeasureAllValues\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":129,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyValueEqualityOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":136,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"vqb0\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"vqb1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":51},\"Item2\":{\"Line\":1,\"Column\":55}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":66},\"Item2\":{\"Line\":1,\"Column\":72}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyValueEqualityOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":136,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyValueEqualityOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":136,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":90},\"Item2\":{\"Line\":1,\"Column\":99}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Week1_StandaloneProject.ApplyValueEqualityOracle\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyValueEqualityOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":136,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":90},\"Item2\":{\"Line\":1,\"Column\":99}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Week1_StandaloneProject.ApplyValueEqualityOracle\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyValueEqualityOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":136,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":90},\"Item2\":{\"Line\":1,\"Column\":99}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Week1_StandaloneProject.ApplyValueEqualityOracle\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyVariableValuesOracles\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":148,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":37}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nVariables\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"valueQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":56},\"Item2\":{\"Line\":1,\"Column\":67}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"inequalityConstraints\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"valueRegister\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":33},\"Item2\":{\"Line\":3,\"Column\":39}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyVariableValuesOracles\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":148,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":37}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyVariableValuesOracles\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":148,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":4,\"Column\":16},\"Item2\":{\"Line\":4,\"Column\":25}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Week1_StandaloneProject.ApplyVariableValuesOracles\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyVariableValuesOracles\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":148,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":4,\"Column\":16},\"Item2\":{\"Line\":4,\"Column\":25}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Week1_StandaloneProject.ApplyVariableValuesOracles\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyVariableValuesOracles\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":148,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":4,\"Column\":16},\"Item2\":{\"Line\":4,\"Column\":25}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Week1_StandaloneProject.ApplyVariableValuesOracles\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyPhaseOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":170,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"oracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":35}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":73},\"Item2\":{\"Line\":1,\"Column\":81}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyPhaseOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":170,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyPhaseOracle\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":170,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":102},\"Item2\":{\"Line\":1,\"Column\":105}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Week1_StandaloneProject.ApplyPhaseOracle\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyGroversIteration\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":186,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":41}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"oracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":15}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"statePrep\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":18}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"iterations\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":46},\"Item2\":{\"Line\":3,\"Column\":56}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"ApplyGroversIteration\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":186,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"FindValuesWithGrover\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":205,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nVariables\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":32},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"valueQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":49},\"Item2\":{\"Line\":1,\"Column\":60}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nIterations\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":67},\"Item2\":{\"Line\":1,\"Column\":78}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"oracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":15}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"statePrep\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":18}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"FindValuesWithGrover\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":205,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SearchSpaceSize\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":220,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nVariables\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"valueQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":43},\"Item2\":{\"Line\":1,\"Column\":54}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sumConstraints\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":61},\"Item2\":{\"Line\":1,\"Column\":75}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SearchSpaceSize\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":220,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"NIterations\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":230,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"searchSpaceSize\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":37}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"NIterations\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":230,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"AllowedAmplitudes\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":237,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nVariables\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":38}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"valueQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":45},\"Item2\":{\"Line\":1,\"Column\":56}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sumConstraints\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":77}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"AllowedAmplitudes\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":237,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"PrepareSearchStatesSuperposition\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":246,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":43}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nVariables\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":54}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"valueQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":61},\"Item2\":{\"Line\":1,\"Column\":72}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sumConstraints\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":39},\"Item2\":{\"Line\":2,\"Column\":47}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"PrepareSearchStatesSuperposition\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":246,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":43}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"PrepareSearchStatesSuperposition\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":246,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":3,\"Column\":16},\"Item2\":{\"Line\":3,\"Column\":25}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Quantum.Week1_StandaloneProject.PrepareSearchStatesSuperposition\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"PrepareSearchStatesSuperposition\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":246,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":3,\"Column\":16},\"Item2\":{\"Line\":3,\"Column\":25}},\"Documentation\":[\"automatically generated QsControlled specialization for Quantum.Week1_StandaloneProject.PrepareSearchStatesSuperposition\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"PrepareSearchStatesSuperposition\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":246,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":3,\"Column\":16},\"Item2\":{\"Line\":3,\"Column\":25}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Quantum.Week1_StandaloneProject.PrepareSearchStatesSuperposition\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"IsKakuroSolutionValid\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":260,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"inequalityConstraints\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":32},\"Item2\":{\"Line\":1,\"Column\":53}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sumEqualityConstraints\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SEC\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":2,\"Column\":33},\"Item2\":{\"Line\":2,\"Column\":36}}]}}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":31}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"values\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":40},\"Item2\":{\"Line\":2,\"Column\":46}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SEC\",\"Range\":{\"Case\":\"Null\"}}]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]]},\"ReturnType\":{\"Case\":\"Bool\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"IsKakuroSolutionValid\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":260,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SolvePuzzle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":285,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nVariables\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"valueQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":40},\"Item2\":{\"Line\":1,\"Column\":51}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"size\"]},\"Type\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":58},\"Item2\":{\"Line\":1,\"Column\":62}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"inequalityConstraints\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":75},\"Item2\":{\"Line\":1,\"Column\":96}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sumEqualityConstraints\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SEC\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":135},\"Item2\":{\"Line\":1,\"Column\":138}}]}}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":111},\"Item2\":{\"Line\":1,\"Column\":133}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SEC\",\"Range\":{\"Case\":\"Null\"}}]}]}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Bool\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"SolvePuzzle\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":285,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"Start\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":313,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":16}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Quantum.Week1_StandaloneProject\",\"Name\":\"Start\"},\"Attributes\":[],\"SourceFile\":\"/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs\",\"Position\":{\"Item1\":313,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":16}},\"Documentation\":[]}")]
#line hidden
namespace Quantum.Week1_StandaloneProject
{
    public class SEC : UDTBase<(IQArray<Int64>,Int64)>, IApplyData
    {
        public SEC() : base(global::Microsoft.Quantum.Simulation.Core.Default.OfType<(IQArray<Int64>,Int64)>())
        {
        }

        public SEC((IQArray<Int64>,Int64) data) : base(data)
        {
        }

        public IQArray<Int64> variables => Data.Item1;
        public Int64 sum => Data.Item2;
        public IQArray<Int64> Item1 => Data.Item1;
        public Int64 Item2 => Data.Item2;
        System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        public void Deconstruct(out IQArray<Int64> item1, out Int64 item2)
        {
            item1 = Data.Item1;
            item2 = Data.Item2;
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 17, 22)]
    public partial class IsNumberPresentInArray : Function<(Int64,IQArray<Int64>), Boolean>, ICallable
    {
        public IsNumberPresentInArray(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Int64>)>, IApplyData
        {
            public In((Int64,IQArray<Int64>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "IsNumberPresentInArray";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.IsNumberPresentInArray";
        protected ICallable Microsoft__Quantum__Arrays__Any
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Boolean> Microsoft__Quantum__Logical__EqualI
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Int64>), Boolean> __Body__ => (__in__) =>
        {
            var (n,array) = __in__;
#line 18 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            return Microsoft__Quantum__Arrays__Any.Apply<Boolean>((Microsoft__Quantum__Logical__EqualI.Partial(new Func<Int64, (Int64,Int64)>((__arg1__) => (__arg1__, n))), array));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arrays__Any = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Any<>));
            this.Microsoft__Quantum__Logical__EqualI = this.__Factory__.Get<ICallable<(Int64,Int64), Boolean>>(typeof(global::Microsoft.Quantum.Logical.EqualI));
        }

        public override IApplyData __DataIn__((Int64,IQArray<Int64>) data) => new In(data);
        public override IApplyData __DataOut__(Boolean data) => new QTuple<Boolean>(data);
        public static System.Threading.Tasks.Task<Boolean> Run(IOperationFactory __m__, Int64 n, IQArray<Int64> array)
        {
            return __m__.Run<IsNumberPresentInArray, (Int64,IQArray<Int64>), Boolean>((n, array));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 22, 33)]
    public partial class FindCommonElementsInArrays : Function<(IQArray<Int64>,IQArray<Int64>), IQArray<Int64>>, ICallable
    {
        public FindCommonElementsInArrays(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Int64>,IQArray<Int64>)>, IApplyData
        {
            public In((IQArray<Int64>,IQArray<Int64>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "FindCommonElementsInArrays";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.FindCommonElementsInArrays";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Int64>), Boolean> IsNumberPresentInArray__
        {
            get;
            set;
        }

        public override Func<(IQArray<Int64>,IQArray<Int64>), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (array1,array2) = __in__;
#line 23 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var result = new QArray<Int64>();
#line 24 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            foreach (var i in new QRange(0L, (array1.Length - 1L)))
#line hidden
            {
#line 25 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                if (IsNumberPresentInArray__.Apply((array1[i], array2)))
                {
#line 26 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    result = QArray<Int64>.Add(result, new QArray<Int64>(array1[i]));
                }
            }

#line 29 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            return result;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.IsNumberPresentInArray__ = this.__Factory__.Get<ICallable<(Int64,IQArray<Int64>), Boolean>>(typeof(IsNumberPresentInArray));
        }

        public override IApplyData __DataIn__((IQArray<Int64>,IQArray<Int64>) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, IQArray<Int64> array1, IQArray<Int64> array2)
        {
            return __m__.Run<FindCommonElementsInArrays, (IQArray<Int64>,IQArray<Int64>), IQArray<Int64>>((array1, array2));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 33, 44)]
    public partial class RemoveDuplicates : Function<IQArray<Int64>, IQArray<Int64>>, ICallable
    {
        public RemoveDuplicates(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "RemoveDuplicates";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.RemoveDuplicates";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Int64>), Boolean> IsNumberPresentInArray__
        {
            get;
            set;
        }

        public override Func<IQArray<Int64>, IQArray<Int64>> __Body__ => (__in__) =>
        {
            var arr = __in__;
#line 34 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var result = new QArray<Int64>();
#line 35 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            foreach (var i in new QRange(0L, (arr.Length - 1L)))
#line hidden
            {
#line 36 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                if (!(IsNumberPresentInArray__.Apply((arr[i], result?.Copy()))))
                {
#line 37 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    result = QArray<Int64>.Add(result, new QArray<Int64>(arr[i]));
                }
            }

#line 40 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            return result;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.IsNumberPresentInArray__ = this.__Factory__.Get<ICallable<(Int64,IQArray<Int64>), Boolean>>(typeof(IsNumberPresentInArray));
        }

        public override IApplyData __DataIn__(IQArray<Int64> data) => data;
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, IQArray<Int64> arr)
        {
            return __m__.Run<RemoveDuplicates, IQArray<Int64>, IQArray<Int64>>(arr);
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 44, 55)]
    public partial class GetLimitationConstraints : Function<(IQArray<Int64>,IQArray<Int64>), IQArray<Int64>>, ICallable
    {
        public GetLimitationConstraints(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Int64>,IQArray<Int64>)>, IApplyData
        {
            public In((IQArray<Int64>,IQArray<Int64>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "GetLimitationConstraints";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.GetLimitationConstraints";
        protected ICallable<(Int64,IQArray<Int64>), Boolean> IsNumberPresentInArray__
        {
            get;
            set;
        }

        public override Func<(IQArray<Int64>,IQArray<Int64>), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (options,limitations) = __in__;
#line 45 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var result = new QArray<Int64>();
#line 46 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            foreach (var limitation in limitations)
#line hidden
            {
#line 47 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                if (!(IsNumberPresentInArray__.Apply((limitation, options))))
                {
#line 48 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    result = QArray<Int64>.Add(result, new QArray<Int64>(limitation));
                }
            }

#line 51 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            return result;
        }

        ;
        public override void __Init__()
        {
            this.IsNumberPresentInArray__ = this.__Factory__.Get<ICallable<(Int64,IQArray<Int64>), Boolean>>(typeof(IsNumberPresentInArray));
        }

        public override IApplyData __DataIn__((IQArray<Int64>,IQArray<Int64>) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, IQArray<Int64> options, IQArray<Int64> limitations)
        {
            return __m__.Run<GetLimitationConstraints, (IQArray<Int64>,IQArray<Int64>), IQArray<Int64>>((options, limitations));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 55, 86)]
    public partial class SumOptions : Function<SEC, IQArray<IQArray<Int64>>>, ICallable
    {
        public SumOptions(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "SumOptions";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.SumOptions";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<SEC, IQArray<IQArray<Int64>>> self
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,Int64), SEC> SEC__
        {
            get;
            set;
        }

        public override Func<SEC, IQArray<IQArray<Int64>>> __Body__ => (__in__) =>
        {
            var constriant = __in__;
#line 56 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var result = new QArray<IQArray<Int64>>();
#line 57 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var variables = (IQArray<Int64>)constriant.variables;
#line 58 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var sumValue = constriant.sum;
#line 59 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            if ((variables.Length == 2L))
            {
#line 60 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                foreach (var i in new QRange(0L, 3L))
#line hidden
                {
#line 61 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    if ((((sumValue - i) < 4L) && ((sumValue - i) > -(1L))))
                    {
#line 62 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        if ((i != (sumValue - i)))
                        {
#line 63 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                            result = QArray<IQArray<Int64>>.Add(result, new QArray<IQArray<Int64>>(new QArray<Int64>(i, (sumValue - i))));
                        }
                    }
                }
            }
            else if ((variables.Length == 3L))
            {
#line 68 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                foreach (var i in new QRange(0L, 3L))
#line hidden
                {
#line 69 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    if ((((sumValue - i) < 4L) && ((sumValue - i) > -(1L))))
                    {
#line 70 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        var options = (IQArray<IQArray<Int64>>)self.Apply<IQArray<IQArray<Int64>>>(new SEC((new QArray<Int64>(0L, 1L), i)));
#line 71 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        foreach (var o in options)
#line hidden
                        {
#line 72 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                            if (((((sumValue - i) != o[0L]) && ((sumValue - i) != o[1L])) && (o[0L] != o[1L])))
                            {
#line 73 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                                result = QArray<IQArray<Int64>>.Add(result, new QArray<IQArray<Int64>>(new QArray<Int64>((sumValue - i), o[0L], o[1L])));
#line 74 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                                result = QArray<IQArray<Int64>>.Add(result, new QArray<IQArray<Int64>>(new QArray<Int64>(o[0L], (sumValue - i), o[1L])));
#line 75 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                                result = QArray<IQArray<Int64>>.Add(result, new QArray<IQArray<Int64>>(new QArray<Int64>(o[0L], o[1L], (sumValue - i))));
                            }
                        }
                    }
                }
            }

#line 81 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            return result;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.self = this;
            this.SEC__ = this.__Factory__.Get<ICallable<(IQArray<Int64>,Int64), SEC>>(typeof(SEC));
        }

        public override IApplyData __DataIn__(SEC data) => data;
        public override IApplyData __DataOut__(IQArray<IQArray<Int64>> data) => data;
        public static System.Threading.Tasks.Task<IQArray<IQArray<Int64>>> Run(IOperationFactory __m__, SEC constriant)
        {
            return __m__.Run<SumOptions, SEC, IQArray<IQArray<Int64>>>(constriant);
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 86, 125)]
    public partial class FindSumConstraints : Function<(IQArray<SEC>,Int64), IQArray<(Int64,Int64)>>, ICallable
    {
        public FindSumConstraints(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<SEC>,Int64)>, IApplyData
        {
            public In((IQArray<SEC>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "FindSumConstraints";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.FindSumConstraints";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<SEC, IQArray<IQArray<Int64>>> SumOptions__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Int64>, IQArray<Int64>> RemoveDuplicates__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,IQArray<Int64>), IQArray<Int64>> FindCommonElementsInArrays__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,IQArray<Int64>), IQArray<Int64>> GetLimitationConstraints__
        {
            get;
            set;
        }

        public override Func<(IQArray<SEC>,Int64), IQArray<(Int64,Int64)>> __Body__ => (__in__) =>
        {
            var (sumEqualityConstraints,nVariables) = __in__;
#line 87 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var result = new QArray<(Int64,Int64)>();
#line 88 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var limitations = (IQArray<Int64>)new QArray<Int64>(0L, 1L, 2L, 3L);
#line 89 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            foreach (var i in new QRange(0L, (nVariables - 1L)))
#line hidden
            {
#line 90 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var x = 0L;
#line 91 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var options1 = new QArray<Int64>();
#line 92 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var options2 = new QArray<Int64>();
#line 93 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var finalOptions = new QArray<Int64>();
#line 94 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                foreach (var constriaint in sumEqualityConstraints)
#line hidden
                {
#line 95 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    var variables = (IQArray<Int64>)constriaint.variables;
#line 96 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    foreach (var j in new QRange(0L, (variables.Length - 1L)))
#line hidden
                    {
#line 97 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        if ((variables[j] == i))
                        {
#line 98 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                            if ((x == 0L))
                            {
#line 99 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                                foreach (var option in SumOptions__.Apply(constriaint))
#line hidden
                                {
#line 100 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                                    options1 = QArray<Int64>.Add(options1, new QArray<Int64>(option[j]));
                                }
                            }
                            else if ((x == 1L))
                            {
#line 103 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                                foreach (var option in SumOptions__.Apply(constriaint))
#line hidden
                                {
#line 104 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                                    options2 = QArray<Int64>.Add(options2, new QArray<Int64>(option[j]));
                                }

#line 106 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                                finalOptions = new QArray<Int64>(RemoveDuplicates__.Apply(FindCommonElementsInArrays__.Apply((options1?.Copy(), options2?.Copy()))));
                            }

#line 108 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                            x = (x + 1L);
                        }
                    }
                }

#line 112 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                Message__.Apply(String.Format("Possible value(s) for X{0}: {1}", i, finalOptions));
#line 113 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var LimitedOptions = (IQArray<Int64>)GetLimitationConstraints__.Apply((finalOptions?.Copy(), limitations));
#line 115 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                foreach (var option in LimitedOptions)
#line hidden
                {
#line 116 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    result = QArray<(Int64,Int64)>.Add(result, new QArray<(Int64,Int64)>((i, option)));
                }
            }

#line 120 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Message__.Apply(String.Format("Sum constraints: {0}", result));
#line 121 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            return result;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.SumOptions__ = this.__Factory__.Get<ICallable<SEC, IQArray<IQArray<Int64>>>>(typeof(SumOptions));
            this.RemoveDuplicates__ = this.__Factory__.Get<ICallable<IQArray<Int64>, IQArray<Int64>>>(typeof(RemoveDuplicates));
            this.FindCommonElementsInArrays__ = this.__Factory__.Get<ICallable<(IQArray<Int64>,IQArray<Int64>), IQArray<Int64>>>(typeof(FindCommonElementsInArrays));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.GetLimitationConstraints__ = this.__Factory__.Get<ICallable<(IQArray<Int64>,IQArray<Int64>), IQArray<Int64>>>(typeof(GetLimitationConstraints));
        }

        public override IApplyData __DataIn__((IQArray<SEC>,Int64) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<(Int64,Int64)> data) => data;
        public static System.Threading.Tasks.Task<IQArray<(Int64,Int64)>> Run(IOperationFactory __m__, IQArray<SEC> sumEqualityConstraints, Int64 nVariables)
        {
            return __m__.Run<FindSumConstraints, (IQArray<SEC>,Int64), IQArray<(Int64,Int64)>>((sumEqualityConstraints, nVariables));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 125, 130)]
    public partial class MeasureValue : Operation<IQArray<Qubit>, Int64>, ICallable
    {
        public MeasureValue(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "MeasureValue";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.MeasureValue";
        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, Int64> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 126 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            return Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(register));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<MeasureValue, IQArray<Qubit>, Int64>(register);
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 130, 137)]
    public partial class MeasureAllValues : Operation<(Int64,IQArray<Qubit>), IQArray<Int64>>, ICallable
    {
        public MeasureAllValues(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Qubit>)>, IApplyData
        {
            public In((Int64,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item2)?.Qubits;
                }
            }
        }

        String ICallable.Name => "MeasureAllValues";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.MeasureAllValues";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Partitioned
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__ForEach
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Int64> MeasureValue__
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Qubit>), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (valueQubits,register) = __in__;
#line 131 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var nVariables = (register.Length / valueQubits);
#line 132 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
#line hidden
            var __arg1__ = valueQubits;
#line 132 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var valuePartitions = (IQArray<IQArray<Qubit>>)Microsoft__Quantum__Arrays__Partitioned.Apply<IQArray<IQArray<Qubit>>>((QArray.Filled(() => __arg1__, (nVariables - 1L)), register));
#line 133 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            return Microsoft__Quantum__Arrays__ForEach.Apply<IQArray<Int64>>((MeasureValue__, valuePartitions));
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Arrays__Partitioned = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Partitioned<>));
            this.Microsoft__Quantum__Arrays__ForEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.ForEach<,>));
            this.MeasureValue__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, Int64>>(typeof(MeasureValue));
        }

        public override IApplyData __DataIn__((Int64,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 valueQubits, IQArray<Qubit> register)
        {
            return __m__.Run<MeasureAllValues, (Int64,IQArray<Qubit>), IQArray<Int64>>((valueQubits, register));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 137, 149)]
    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Adjoint, 137, 149)]
    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Controlled, 137, 149)]
    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.ControlledAdjoint, 137, 149)]
    public partial class ApplyValueEqualityOracle : Unitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public ApplyValueEqualityOracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyValueEqualityOracle";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.ApplyValueEqualityOracle";
        protected IUnitary Microsoft__Quantum__Canon__ApplyToEachCA
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Zipped
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (vqb0,vqb1,target) = __in__;
#line 141 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((vqb0, vqb1))));
#line 144 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Apply((vqb1, target));
#line 137 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((vqb0, vqb1))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (vqb0,vqb1,target) = __in__;
#line 137 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((vqb0, vqb1))));
#line 137 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Apply((vqb1, target));
#line 137 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((vqb0, vqb1))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(vqb0,vqb1,target)) = __in__;
#line 137 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((vqb0, vqb1))));
#line 137 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Controlled.Apply((__controlQubits__, (vqb1, target)));
#line 137 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((vqb0, vqb1))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(vqb0,vqb1,target)) = __in__;
#line 137 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((vqb0, vqb1))));
#line 137 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Controlled.Apply((__controlQubits__, (vqb1, target)));
#line 137 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__CNOT, Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Qubit,Qubit)>>((vqb0, vqb1))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ApplyToEachCA = this.__Factory__.Get<IUnitary>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachCA<>));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Microsoft__Quantum__Arrays__Zipped = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Zipped<,>));
            this.Microsoft__Quantum__Canon__ControlledOnInt = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> vqb0, IQArray<Qubit> vqb1, Qubit target)
        {
            return __m__.Run<ApplyValueEqualityOracle, (IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid>((vqb0, vqb1, target));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 149, 171)]
    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Adjoint, 149, 171)]
    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Controlled, 149, 171)]
    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.ControlledAdjoint, 149, 171)]
    public partial class ApplyVariableValuesOracles : Unitary<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public ApplyVariableValuesOracles(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyVariableValuesOracles";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.ApplyVariableValuesOracles";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Zipped
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)> ApplyValueEqualityOracle__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (nVariables,valueQubits,inequalityConstraints,valueRegister,target) = __in__;
#line 153 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var nInequalityConstraints = inequalityConstraints.Length;
#line hidden
            {
#line 154 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var inequalityConflictQubits = Allocate__.Apply(nInequalityConstraints);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 156 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    foreach (var ((__qsVar0__start__,__qsVar1__end__),__qsVar2__conflictQubit__) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((inequalityConstraints, inequalityConflictQubits)))
#line hidden
                    {
#line 158 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        ApplyValueEqualityOracle__.Apply((valueRegister.Slice(new QRange((__qsVar0__start__ * valueQubits), (((__qsVar0__start__ + 1L) * valueQubits) - 1L))), valueRegister.Slice(new QRange((__qsVar1__end__ * valueQubits), (((__qsVar1__end__ + 1L) * valueQubits) - 1L))), __qsVar2__conflictQubit__));
                    }

#line 166 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Apply((inequalityConflictQubits, target));
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    foreach (var ((__qsVar0____qsVar0__start____,__qsVar1____qsVar1__end____),__qsVar2____qsVar2__conflictQubit____) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((inequalityConstraints, inequalityConflictQubits)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((inequalityConstraints, inequalityConflictQubits)).Length - 1L), -1L, 0L)))
#line hidden
                    {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        ApplyValueEqualityOracle__.Adjoint.Apply((valueRegister.Slice(new QRange((__qsVar0____qsVar0__start____ * valueQubits), (((__qsVar0____qsVar0__start____ + 1L) * valueQubits) - 1L))), valueRegister.Slice(new QRange((__qsVar1____qsVar1__end____ * valueQubits), (((__qsVar1____qsVar1__end____ + 1L) * valueQubits) - 1L))), __qsVar2____qsVar2__conflictQubit____));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(inequalityConflictQubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (nVariables,valueQubits,inequalityConstraints,valueRegister,target) = __in__;
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var __qsVar0__nInequalityConstraints__ = inequalityConstraints.Length;
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var __qsVar1__inequalityConflictQubits__ = Allocate__.Apply(__qsVar0__nInequalityConstraints__);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    foreach (var ((__qsVar0____qsVar2__start____,__qsVar1____qsVar3__end____),__qsVar2____qsVar4__conflictQubit____) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((inequalityConstraints, __qsVar1__inequalityConflictQubits__)))
#line hidden
                    {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        ApplyValueEqualityOracle__.Apply((valueRegister.Slice(new QRange((__qsVar0____qsVar2__start____ * valueQubits), (((__qsVar0____qsVar2__start____ + 1L) * valueQubits) - 1L))), valueRegister.Slice(new QRange((__qsVar1____qsVar3__end____ * valueQubits), (((__qsVar1____qsVar3__end____ + 1L) * valueQubits) - 1L))), __qsVar2____qsVar4__conflictQubit____));
                    }

#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Apply((__qsVar1__inequalityConflictQubits__, target));
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    foreach (var ((__qsVar0____qsVar0____qsVar2__start______,__qsVar1____qsVar1____qsVar3__end______),__qsVar2____qsVar2____qsVar4__conflictQubit______) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((inequalityConstraints, __qsVar1__inequalityConflictQubits__)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((inequalityConstraints, __qsVar1__inequalityConflictQubits__)).Length - 1L), -1L, 0L)))
#line hidden
                    {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        ApplyValueEqualityOracle__.Adjoint.Apply((valueRegister.Slice(new QRange((__qsVar0____qsVar0____qsVar2__start______ * valueQubits), (((__qsVar0____qsVar0____qsVar2__start______ + 1L) * valueQubits) - 1L))), valueRegister.Slice(new QRange((__qsVar1____qsVar1____qsVar3__end______ * valueQubits), (((__qsVar1____qsVar1____qsVar3__end______ + 1L) * valueQubits) - 1L))), __qsVar2____qsVar2____qsVar4__conflictQubit______));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar1__inequalityConflictQubits__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(nVariables,valueQubits,inequalityConstraints,valueRegister,target)) = __in__;
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var nInequalityConstraints = inequalityConstraints.Length;
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var inequalityConflictQubits = Allocate__.Apply(nInequalityConstraints);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    foreach (var ((__qsVar0__start__,__qsVar1__end__),__qsVar2__conflictQubit__) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((inequalityConstraints, inequalityConflictQubits)))
#line hidden
                    {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        ApplyValueEqualityOracle__.Apply((valueRegister.Slice(new QRange((__qsVar0__start__ * valueQubits), (((__qsVar0__start__ + 1L) * valueQubits) - 1L))), valueRegister.Slice(new QRange((__qsVar1__end__ * valueQubits), (((__qsVar1__end__ + 1L) * valueQubits) - 1L))), __qsVar2__conflictQubit__));
                    }

#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Controlled.Apply((__controlQubits__, (inequalityConflictQubits, target)));
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    foreach (var ((__qsVar0____qsVar0__start____,__qsVar1____qsVar1__end____),__qsVar2____qsVar2__conflictQubit____) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((inequalityConstraints, inequalityConflictQubits)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((inequalityConstraints, inequalityConflictQubits)).Length - 1L), -1L, 0L)))
#line hidden
                    {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        ApplyValueEqualityOracle__.Adjoint.Apply((valueRegister.Slice(new QRange((__qsVar0____qsVar0__start____ * valueQubits), (((__qsVar0____qsVar0__start____ + 1L) * valueQubits) - 1L))), valueRegister.Slice(new QRange((__qsVar1____qsVar1__end____ * valueQubits), (((__qsVar1____qsVar1__end____ + 1L) * valueQubits) - 1L))), __qsVar2____qsVar2__conflictQubit____));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(inequalityConflictQubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(nVariables,valueQubits,inequalityConstraints,valueRegister,target)) = __in__;
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var __qsVar0__nInequalityConstraints__ = inequalityConstraints.Length;
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var __qsVar1__inequalityConflictQubits__ = Allocate__.Apply(__qsVar0__nInequalityConstraints__);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    foreach (var ((__qsVar0____qsVar2__start____,__qsVar1____qsVar3__end____),__qsVar2____qsVar4__conflictQubit____) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((inequalityConstraints, __qsVar1__inequalityConflictQubits__)))
#line hidden
                    {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        ApplyValueEqualityOracle__.Apply((valueRegister.Slice(new QRange((__qsVar0____qsVar2__start____ * valueQubits), (((__qsVar0____qsVar2__start____ + 1L) * valueQubits) - 1L))), valueRegister.Slice(new QRange((__qsVar1____qsVar3__end____ * valueQubits), (((__qsVar1____qsVar3__end____ + 1L) * valueQubits) - 1L))), __qsVar2____qsVar4__conflictQubit____));
                    }

#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((0L, Microsoft__Quantum__Intrinsic__X)).Adjoint.Controlled.Apply((__controlQubits__, (__qsVar1__inequalityConflictQubits__, target)));
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    foreach (var ((__qsVar0____qsVar0____qsVar2__start______,__qsVar1____qsVar1____qsVar3__end______),__qsVar2____qsVar2____qsVar4__conflictQubit______) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((inequalityConstraints, __qsVar1__inequalityConflictQubits__)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<((Int64,Int64),Qubit)>>((inequalityConstraints, __qsVar1__inequalityConflictQubits__)).Length - 1L), -1L, 0L)))
#line hidden
                    {
#line 149 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        ApplyValueEqualityOracle__.Adjoint.Apply((valueRegister.Slice(new QRange((__qsVar0____qsVar0____qsVar2__start______ * valueQubits), (((__qsVar0____qsVar0____qsVar2__start______ + 1L) * valueQubits) - 1L))), valueRegister.Slice(new QRange((__qsVar1____qsVar1____qsVar3__end______ * valueQubits), (((__qsVar1____qsVar1____qsVar3__end______ + 1L) * valueQubits) - 1L))), __qsVar2____qsVar2____qsVar4__conflictQubit______));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar1__inequalityConflictQubits__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Arrays__Zipped = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Zipped<,>));
            this.ApplyValueEqualityOracle__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>>(typeof(ApplyValueEqualityOracle));
            this.Microsoft__Quantum__Canon__ControlledOnInt = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 nVariables, Int64 valueQubits, IQArray<(Int64,Int64)> inequalityConstraints, IQArray<Qubit> valueRegister, Qubit target)
        {
            return __m__.Run<ApplyVariableValuesOracles, (Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit), QVoid>((nVariables, valueQubits, inequalityConstraints, valueRegister, target));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 171, 187)]
    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Adjoint, 171, 187)]
    public partial class ApplyPhaseOracle : Adjointable<(IAdjointable,IQArray<Qubit>)>, ICallable
    {
        public ApplyPhaseOracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IAdjointable,IQArray<Qubit>)>, IApplyData
        {
            public In((IAdjointable,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyPhaseOracle";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.ApplyPhaseOracle";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        public override Func<(IAdjointable,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (oracle,register) = __in__;
#line hidden
            {
#line 172 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var target = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 175 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(target);
#line 176 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 181 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    oracle.Apply((register, target));
#line 171 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(target);
#line 171 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(target);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(target);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IAdjointable,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (oracle,register) = __in__;
#line 171 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            {
#line 171 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var __qsVar0__target__ = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 171 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(__qsVar0__target__);
#line 171 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(__qsVar0__target__);
#line 171 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    oracle.Adjoint.Apply((register, __qsVar0__target__));
#line 171 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(__qsVar0__target__);
#line 171 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(__qsVar0__target__);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__target__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
        }

        public override IApplyData __DataIn__((IAdjointable,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IAdjointable oracle, IQArray<Qubit> register)
        {
            return __m__.Run<ApplyPhaseOracle, (IAdjointable,IQArray<Qubit>), QVoid>((oracle, register));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 187, 206)]
    public partial class ApplyGroversIteration : Operation<(IQArray<Qubit>,IAdjointable,IAdjointable,Int64), QVoid>, ICallable
    {
        public ApplyGroversIteration(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IAdjointable,IAdjointable,Int64)>, IApplyData
        {
            public In((IQArray<Qubit>,IAdjointable,IAdjointable,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyGroversIteration";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.ApplyGroversIteration";
        protected IAdjointable<(IAdjointable,IQArray<Qubit>)> ApplyPhaseOracle__
        {
            get;
            set;
        }

        protected IAdjointable Microsoft__Quantum__Canon__ApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Most
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Tail
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IAdjointable,IAdjointable,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (register,oracle,statePrep,iterations) = __in__;
#line 191 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var applyPhaseOracle = ApplyPhaseOracle__.Partial(new Func<IQArray<Qubit>, (IAdjointable,IQArray<Qubit>)>((__arg1__) => (oracle, __arg1__)));
#line 192 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            statePrep.Apply(register);
#line 194 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            foreach (var __arg2__ in new QRange(1L, iterations))
#line hidden
            {
#line 195 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                applyPhaseOracle.Apply(register);
#line 197 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                statePrep.Adjoint.Apply(register);
#line 198 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__X, register));
#line 200 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((Microsoft__Quantum__Arrays__Most.Apply<IQArray<Qubit>>(register), Microsoft__Quantum__Arrays__Tail.Apply<Qubit>(register)));
#line 187 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, register));
#line 187 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                statePrep.Adjoint.Adjoint.Apply(register);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.ApplyPhaseOracle__ = this.__Factory__.Get<IAdjointable<(IAdjointable,IQArray<Qubit>)>>(typeof(ApplyPhaseOracle));
            this.Microsoft__Quantum__Canon__ApplyToEachA = this.__Factory__.Get<IAdjointable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.Microsoft__Quantum__Arrays__Most = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Most<>));
            this.Microsoft__Quantum__Arrays__Tail = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Tail<>));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IAdjointable,IAdjointable,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register, IAdjointable oracle, IAdjointable statePrep, Int64 iterations)
        {
            return __m__.Run<ApplyGroversIteration, (IQArray<Qubit>,IAdjointable,IAdjointable,Int64), QVoid>((register, oracle, statePrep, iterations));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 206, 221)]
    public partial class FindValuesWithGrover : Operation<(Int64,Int64,Int64,IAdjointable,IAdjointable), IQArray<Int64>>, ICallable
    {
        public FindValuesWithGrover(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64,IAdjointable,IAdjointable)>, IApplyData
        {
            public In((Int64,Int64,Int64,IAdjointable,IAdjointable) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits);
                }
            }
        }

        String ICallable.Name => "FindValuesWithGrover";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.FindValuesWithGrover";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IAdjointable,IAdjointable,Int64), QVoid> ApplyGroversIteration__
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Qubit>), IQArray<Int64>> MeasureAllValues__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64,IAdjointable,IAdjointable), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (nVariables,valueQubits,nIterations,oracle,statePrep) = __in__;
#line hidden
            {
#line 211 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var register = Allocate__.Apply((valueQubits * nVariables));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 212 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Message__.Apply(String.Format("Trying search with {0} iterations...", nIterations));
#line 213 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    if ((nIterations > 75L))
                    {
#line 214 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                        Message__.Apply("Warning: This might take a while");
                    }

#line 216 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    ApplyGroversIteration__.Apply((register, oracle, statePrep, nIterations));
#line 217 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    return MeasureAllValues__.Apply((valueQubits, register));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(register);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.ApplyGroversIteration__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IAdjointable,IAdjointable,Int64), QVoid>>(typeof(ApplyGroversIteration));
            this.MeasureAllValues__ = this.__Factory__.Get<ICallable<(Int64,IQArray<Qubit>), IQArray<Int64>>>(typeof(MeasureAllValues));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64,IAdjointable,IAdjointable) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 nVariables, Int64 valueQubits, Int64 nIterations, IAdjointable oracle, IAdjointable statePrep)
        {
            return __m__.Run<FindValuesWithGrover, (Int64,Int64,Int64,IAdjointable,IAdjointable), IQArray<Int64>>((nVariables, valueQubits, nIterations, oracle, statePrep));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 221, 231)]
    public partial class SearchSpaceSize : Function<(Int64,Int64,IQArray<(Int64,Int64)>), Int64>, ICallable
    {
        public SearchSpaceSize(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,IQArray<(Int64,Int64)>)>, IApplyData
        {
            public In((Int64,Int64,IQArray<(Int64,Int64)>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "SearchSpaceSize";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.SearchSpaceSize";
        protected ICallable Microsoft__Quantum__Arrays__Fold
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__TimesI
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,IQArray<(Int64,Int64)>), Int64> __Body__ => (__in__) =>
        {
            var (nVariables,valueQubits,sumConstraints) = __in__;
#line 222 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
#line hidden
            var __arg1__ = (1L << (int)valueQubits);
#line 222 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var valueOptions = new QArray<Int64>(QArray.Filled(() => __arg1__, nVariables));
#line 223 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            foreach (var (cell,_) in sumConstraints)
#line hidden
            {
#line 224 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                valueOptions.Modify(cell, (valueOptions[cell] - 1L));
            }

#line 226 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            return Microsoft__Quantum__Arrays__Fold.Apply<Int64>((Microsoft__Quantum__Math__TimesI, 1L, valueOptions?.Copy()));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arrays__Fold = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Fold<,>));
            this.Microsoft__Quantum__Math__TimesI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.TimesI));
        }

        public override IApplyData __DataIn__((Int64,Int64,IQArray<(Int64,Int64)>) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 nVariables, Int64 valueQubits, IQArray<(Int64,Int64)> sumConstraints)
        {
            return __m__.Run<SearchSpaceSize, (Int64,Int64,IQArray<(Int64,Int64)>), Int64>((nVariables, valueQubits, sumConstraints));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 231, 238)]
    public partial class NIterations : Function<Int64, Int64>, ICallable
    {
        public NIterations(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "NIterations";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.NIterations";
        protected ICallable<Double, Double> Microsoft__Quantum__Math__ArcSin
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Sqrt
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Round
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        public override Func<Int64, Int64> __Body__ => (__in__) =>
        {
            var searchSpaceSize = __in__;
#line 232 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var angle = Microsoft__Quantum__Math__ArcSin.Apply((1D / Microsoft__Quantum__Math__Sqrt.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply(searchSpaceSize))));
#line 233 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var nIterations = Microsoft__Quantum__Math__Round.Apply((((0.25D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) / angle) - 0.5D));
#line 234 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            return nIterations;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__ArcSin = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.ArcSin));
            this.Microsoft__Quantum__Math__Sqrt = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Sqrt));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Microsoft__Quantum__Math__Round = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Round));
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 searchSpaceSize)
        {
            return __m__.Run<NIterations, Int64, Int64>(searchSpaceSize);
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 238, 247)]
    public partial class AllowedAmplitudes : Function<(Int64,Int64,IQArray<(Int64,Int64)>), IQArray<IQArray<Double>>>, ICallable
    {
        public AllowedAmplitudes(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,IQArray<(Int64,Int64)>)>, IApplyData
        {
            public In((Int64,Int64,IQArray<(Int64,Int64)>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "AllowedAmplitudes";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.AllowedAmplitudes";
        public override Func<(Int64,Int64,IQArray<(Int64,Int64)>), IQArray<IQArray<Double>>> __Body__ => (__in__) =>
        {
            var (nVariables,valueQubits,sumConstraints) = __in__;
#line 239 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
#line hidden
            var __arg2__ = 1D;
#line 239 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
#line hidden
            var __arg1__ = QArray.Filled(() => __arg2__, (1L << (int)valueQubits));
#line 239 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var amplitudes = new QArray<IQArray<Double>>(QArray.Filled(() => __arg1__, nVariables));
#line 240 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            foreach (var (cell,value) in sumConstraints)
#line hidden
            {
#line 241 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                amplitudes.Modify(cell, new QArray<Double>(amplitudes[cell]).Modify(value, 0D));
            }

#line 243 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            return amplitudes;
        }

        ;
        public override void __Init__()
        {
        }

        public override IApplyData __DataIn__((Int64,Int64,IQArray<(Int64,Int64)>) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<IQArray<Double>> data) => data;
        public static System.Threading.Tasks.Task<IQArray<IQArray<Double>>> Run(IOperationFactory __m__, Int64 nVariables, Int64 valueQubits, IQArray<(Int64,Int64)> sumConstraints)
        {
            return __m__.Run<AllowedAmplitudes, (Int64,Int64,IQArray<(Int64,Int64)>), IQArray<IQArray<Double>>>((nVariables, valueQubits, sumConstraints));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 247, 261)]
    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Adjoint, 247, 261)]
    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Controlled, 247, 261)]
    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.ControlledAdjoint, 247, 261)]
    public partial class PrepareSearchStatesSuperposition : Unitary<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>)>, ICallable
    {
        public PrepareSearchStatesSuperposition(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>)>, IApplyData
        {
            public In((Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item4)?.Qubits;
                }
            }
        }

        String ICallable.Name => "PrepareSearchStatesSuperposition";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.PrepareSearchStatesSuperposition";
        protected ICallable Microsoft__Quantum__Arrays__Chunks
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<(Int64,Int64)>), IQArray<IQArray<Double>>> AllowedAmplitudes__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Zipped
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Double>,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Preparation__PrepareArbitraryStateD
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (nVariables,valueQubits,sumConstraints,register) = __in__;
#line 251 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var valueRegister = (IQArray<IQArray<Qubit>>)Microsoft__Quantum__Arrays__Chunks.Apply<IQArray<IQArray<Qubit>>>((valueQubits, register));
#line 253 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var amplitudes = (IQArray<IQArray<Double>>)AllowedAmplitudes__.Apply((nVariables, valueQubits, sumConstraints));
#line 255 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            foreach (var (amps,chunk) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Double>,IQArray<Qubit>)>>((amplitudes, valueRegister)))
#line hidden
            {
#line 256 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                Microsoft__Quantum__Preparation__PrepareArbitraryStateD.Apply((amps, new Microsoft.Quantum.Arithmetic.LittleEndian(chunk)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (nVariables,valueQubits,sumConstraints,register) = __in__;
#line 247 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var __qsVar0__valueRegister__ = (IQArray<IQArray<Qubit>>)Microsoft__Quantum__Arrays__Chunks.Apply<IQArray<IQArray<Qubit>>>((valueQubits, register));
#line 247 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var __qsVar1__amplitudes__ = (IQArray<IQArray<Double>>)AllowedAmplitudes__.Apply((nVariables, valueQubits, sumConstraints));
#line 247 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            foreach (var (__qsVar2__amps__,__qsVar3__chunk__) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Double>,IQArray<Qubit>)>>((__qsVar1__amplitudes__, __qsVar0__valueRegister__)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Double>,IQArray<Qubit>)>>((__qsVar1__amplitudes__, __qsVar0__valueRegister__)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 247 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                Microsoft__Quantum__Preparation__PrepareArbitraryStateD.Adjoint.Apply((__qsVar2__amps__, new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__chunk__)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(nVariables,valueQubits,sumConstraints,register)) = __in__;
#line 247 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var valueRegister = (IQArray<IQArray<Qubit>>)Microsoft__Quantum__Arrays__Chunks.Apply<IQArray<IQArray<Qubit>>>((valueQubits, register));
#line 247 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var amplitudes = (IQArray<IQArray<Double>>)AllowedAmplitudes__.Apply((nVariables, valueQubits, sumConstraints));
#line 247 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            foreach (var (amps,chunk) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Double>,IQArray<Qubit>)>>((amplitudes, valueRegister)))
#line hidden
            {
#line 247 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                Microsoft__Quantum__Preparation__PrepareArbitraryStateD.Controlled.Apply((__controlQubits__, (amps, new Microsoft.Quantum.Arithmetic.LittleEndian(chunk))));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(nVariables,valueQubits,sumConstraints,register)) = __in__;
#line 247 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var __qsVar0__valueRegister__ = (IQArray<IQArray<Qubit>>)Microsoft__Quantum__Arrays__Chunks.Apply<IQArray<IQArray<Qubit>>>((valueQubits, register));
#line 247 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var __qsVar1__amplitudes__ = (IQArray<IQArray<Double>>)AllowedAmplitudes__.Apply((nVariables, valueQubits, sumConstraints));
#line 247 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            foreach (var (__qsVar2__amps__,__qsVar3__chunk__) in Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Double>,IQArray<Qubit>)>>((__qsVar1__amplitudes__, __qsVar0__valueRegister__)).Slice(new QRange((Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(IQArray<Double>,IQArray<Qubit>)>>((__qsVar1__amplitudes__, __qsVar0__valueRegister__)).Length - 1L), -1L, 0L)))
#line hidden
            {
#line 247 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                Microsoft__Quantum__Preparation__PrepareArbitraryStateD.Adjoint.Controlled.Apply((__controlQubits__, (__qsVar2__amps__, new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__chunk__))));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arrays__Chunks = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Chunks<>));
            this.AllowedAmplitudes__ = this.__Factory__.Get<ICallable<(Int64,Int64,IQArray<(Int64,Int64)>), IQArray<IQArray<Double>>>>(typeof(AllowedAmplitudes));
            this.Microsoft__Quantum__Arrays__Zipped = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Zipped<,>));
            this.Microsoft__Quantum__Preparation__PrepareArbitraryStateD = this.__Factory__.Get<IUnitary<(IQArray<Double>,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Preparation.PrepareArbitraryStateD));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
        }

        public override IApplyData __DataIn__((Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 nVariables, Int64 valueQubits, IQArray<(Int64,Int64)> sumConstraints, IQArray<Qubit> register)
        {
            return __m__.Run<PrepareSearchStatesSuperposition, (Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>), QVoid>((nVariables, valueQubits, sumConstraints, register));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 261, 286)]
    public partial class IsKakuroSolutionValid : Function<(IQArray<(Int64,Int64)>,IQArray<SEC>,IQArray<Int64>), Boolean>, ICallable
    {
        public IsKakuroSolutionValid(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<(Int64,Int64)>,IQArray<SEC>,IQArray<Int64>)>, IApplyData
        {
            public In((IQArray<(Int64,Int64)>,IQArray<SEC>,IQArray<Int64>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "IsKakuroSolutionValid";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.IsKakuroSolutionValid";
        protected ICallable Microsoft__Quantum__Arrays__Any
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Boolean> Microsoft__Quantum__Logical__GreaterThanOrEqualI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Boolean> Microsoft__Quantum__Logical__EqualI
        {
            get;
            set;
        }

        public override Func<(IQArray<(Int64,Int64)>,IQArray<SEC>,IQArray<Int64>), Boolean> __Body__ => (__in__) =>
        {
            var (inequalityConstraints,sumEqualityConstraints,values) = __in__;
#line 264 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            if (Microsoft__Quantum__Arrays__Any.Apply<Boolean>((Microsoft__Quantum__Logical__GreaterThanOrEqualI.Partial(new Func<Int64, (Int64,Int64)>((__arg1__) => (__arg1__, 4L))), values)))
            {
#line 265 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                return false;
            }

#line 267 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            if (Microsoft__Quantum__Arrays__Any.Apply<Boolean>((Microsoft__Quantum__Logical__EqualI, inequalityConstraints)))
            {
#line 268 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                return false;
            }

#line 271 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            foreach (var constraint in sumEqualityConstraints)
#line hidden
            {
#line 272 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var variables = (IQArray<Int64>)constraint.variables;
#line 273 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var expectedSum = constraint.sum;
#line 274 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                var valuesSum = 0L;
#line 275 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                foreach (var variable in variables)
#line hidden
                {
#line 276 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    valuesSum = (valuesSum + values[variable]);
                }

#line 278 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                if ((valuesSum != expectedSum))
                {
#line 279 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    return false;
                }
            }

#line 283 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            return true;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arrays__Any = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Any<>));
            this.Microsoft__Quantum__Logical__GreaterThanOrEqualI = this.__Factory__.Get<ICallable<(Int64,Int64), Boolean>>(typeof(global::Microsoft.Quantum.Logical.GreaterThanOrEqualI));
            this.Microsoft__Quantum__Logical__EqualI = this.__Factory__.Get<ICallable<(Int64,Int64), Boolean>>(typeof(global::Microsoft.Quantum.Logical.EqualI));
        }

        public override IApplyData __DataIn__((IQArray<(Int64,Int64)>,IQArray<SEC>,IQArray<Int64>) data) => new In(data);
        public override IApplyData __DataOut__(Boolean data) => new QTuple<Boolean>(data);
        public static System.Threading.Tasks.Task<Boolean> Run(IOperationFactory __m__, IQArray<(Int64,Int64)> inequalityConstraints, IQArray<SEC> sumEqualityConstraints, IQArray<Int64> values)
        {
            return __m__.Run<IsKakuroSolutionValid, (IQArray<(Int64,Int64)>,IQArray<SEC>,IQArray<Int64>), Boolean>((inequalityConstraints, sumEqualityConstraints, values));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 286, 314)]
    public partial class SolvePuzzle : Operation<(Int64,Int64,(Int64,Int64),IQArray<(Int64,Int64)>,IQArray<SEC>), (Boolean,IQArray<Int64>)>, ICallable
    {
        public SolvePuzzle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,(Int64,Int64),IQArray<(Int64,Int64)>,IQArray<SEC>)>, IApplyData
        {
            public In((Int64,Int64,(Int64,Int64),IQArray<(Int64,Int64)>,IQArray<SEC>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(Boolean,IQArray<Int64>)>, IApplyData
        {
            public Out((Boolean,IQArray<Int64>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "SolvePuzzle";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.SolvePuzzle";
        protected IUnitary<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)> ApplyVariableValuesOracles__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<SEC>,Int64), IQArray<(Int64,Int64)>> FindSumConstraints__
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>)> PrepareSearchStatesSuperposition__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<(Int64,Int64)>), Int64> SearchSpaceSize__
        {
            get;
            set;
        }

        protected ICallable<Int64, Int64> NIterations__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64,IAdjointable,IAdjointable), IQArray<Int64>> FindValuesWithGrover__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<(Int64,Int64)>,IQArray<SEC>,IQArray<Int64>), Boolean> IsKakuroSolutionValid__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,(Int64,Int64),IQArray<(Int64,Int64)>,IQArray<SEC>), (Boolean,IQArray<Int64>)> __Body__ => (__in__) =>
        {
            var (nVariables,valueQubits,size,inequalityConstraints,sumEqualityConstraints) = __in__;
#line 287 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var oracle = ApplyVariableValuesOracles__.Partial(new Func<(IQArray<Qubit>,Qubit), (Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>((__arg1__) => (nVariables, valueQubits, inequalityConstraints, __arg1__.Item1, __arg1__.Item2)));
#line 288 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var sumConstraints = (IQArray<(Int64,Int64)>)FindSumConstraints__.Apply((sumEqualityConstraints, nVariables));
#line 289 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var statePrep = PrepareSearchStatesSuperposition__.Partial(new Func<IQArray<Qubit>, (Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>)>((__arg2__) => (nVariables, valueQubits, sumConstraints, __arg2__)));
#line 290 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var searchSpaceSize = SearchSpaceSize__.Apply((nVariables, valueQubits, sumConstraints));
#line 291 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var numIterations = NIterations__.Apply(searchSpaceSize);
#line 292 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var (nRows,nCols) = size;
#line 294 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Message__.Apply(String.Format("Running Quantum test with number of variables = {0}", nVariables));
#line 295 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Message__.Apply(String.Format("   Bits per value = {0}", valueQubits));
#line 296 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Message__.Apply(String.Format("   Inequality constraints = {0}", inequalityConstraints));
#line 297 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Message__.Apply(String.Format("   Sum Equality Constraints = {0}", sumEqualityConstraints));
#line 298 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Message__.Apply(String.Format("   Estimated number iterations needed = {0}", numIterations));
#line 299 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Message__.Apply(String.Format("   Size of kakuro grid = {0}x{1}", nRows, nCols));
#line 300 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Message__.Apply(String.Format("   Search space size = {0}", searchSpaceSize));
#line 301 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var values = (IQArray<Int64>)FindValuesWithGrover__.Apply((nVariables, valueQubits, numIterations, oracle, statePrep));
#line 303 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Message__.Apply(String.Format("Got Sudoku solution: {0}", values));
#line 304 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            if (IsKakuroSolutionValid__.Apply((inequalityConstraints, sumEqualityConstraints, values)))
            {
#line 305 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                Message__.Apply(String.Format("Got valid Sudoku solution: {0}", values));
#line 306 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                return (true, values);
            }
            else
            {
#line 308 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                Message__.Apply(String.Format("Got invalid Sudoku solution: {0}", values));
#line 309 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                return (false, values);
            }
        }

        ;
        public override void __Init__()
        {
            this.ApplyVariableValuesOracles__ = this.__Factory__.Get<IUnitary<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>>(typeof(ApplyVariableValuesOracles));
            this.FindSumConstraints__ = this.__Factory__.Get<ICallable<(IQArray<SEC>,Int64), IQArray<(Int64,Int64)>>>(typeof(FindSumConstraints));
            this.PrepareSearchStatesSuperposition__ = this.__Factory__.Get<IUnitary<(Int64,Int64,IQArray<(Int64,Int64)>,IQArray<Qubit>)>>(typeof(PrepareSearchStatesSuperposition));
            this.SearchSpaceSize__ = this.__Factory__.Get<ICallable<(Int64,Int64,IQArray<(Int64,Int64)>), Int64>>(typeof(SearchSpaceSize));
            this.NIterations__ = this.__Factory__.Get<ICallable<Int64, Int64>>(typeof(NIterations));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.FindValuesWithGrover__ = this.__Factory__.Get<ICallable<(Int64,Int64,Int64,IAdjointable,IAdjointable), IQArray<Int64>>>(typeof(FindValuesWithGrover));
            this.IsKakuroSolutionValid__ = this.__Factory__.Get<ICallable<(IQArray<(Int64,Int64)>,IQArray<SEC>,IQArray<Int64>), Boolean>>(typeof(IsKakuroSolutionValid));
        }

        public override IApplyData __DataIn__((Int64,Int64,(Int64,Int64),IQArray<(Int64,Int64)>,IQArray<SEC>) data) => new In(data);
        public override IApplyData __DataOut__((Boolean,IQArray<Int64>) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Boolean,IQArray<Int64>)> Run(IOperationFactory __m__, Int64 nVariables, Int64 valueQubits, (Int64,Int64) size, IQArray<(Int64,Int64)> inequalityConstraints, IQArray<SEC> sumEqualityConstraints)
        {
            return __m__.Run<SolvePuzzle, (Int64,Int64,(Int64,Int64),IQArray<(Int64,Int64)>,IQArray<SEC>), (Boolean,IQArray<Int64>)>((nVariables, valueQubits, size, inequalityConstraints, sumEqualityConstraints));
        }
    }

    [SourceLocation("/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs", OperationFunctor.Body, 314, -1)]
    public partial class Start : Operation<QVoid, QVoid>, ICallable
    {
        public Start(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Start";
        String ICallable.FullName => "Quantum.Week1_StandaloneProject.Start";
        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,Int64), SEC> SEC__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,(Int64,Int64),IQArray<(Int64,Int64)>,IQArray<SEC>), (Boolean,IQArray<Int64>)> SolvePuzzle__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 316 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            Message__.Apply("Solving Kakuro Puzzle using Grover's Algorithm");
#line 319 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var size = (4L, 4L);
#line 323 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var nVariables = 7L;
#line 327 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var valueQubits = 2L;
#line 330 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var inequalityConstraints = (IQArray<(Int64,Int64)>)new QArray<(Int64,Int64)>((0L, 1L), (0L, 2L), (1L, 3L), (1L, 5L), (2L, 3L), (2L, 4L), (3L, 4L), (3L, 5L), (4L, 6L), (5L, 6L));
#line 334 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var sumEqualityConstraints = (IQArray<SEC>)new QArray<SEC>(new SEC((new QArray<Int64>(0L, 1L), 3L)), new SEC((new QArray<Int64>(0L, 2L), 5L)), new SEC((new QArray<Int64>(1L, 3L, 5L), 3L)), new SEC((new QArray<Int64>(2L, 3L, 4L), 5L)), new SEC((new QArray<Int64>(4L, 6L), 1L)), new SEC((new QArray<Int64>(5L, 6L), 1L)));
#line 349 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var result = ((Boolean,IQArray<Int64>))SolvePuzzle__.Apply((nVariables, valueQubits, size, inequalityConstraints, sumEqualityConstraints));
#line 350 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            var (isValid,values) = ((Boolean,IQArray<Int64>))result;
#line 351 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
            if (isValid)
            {
#line 352 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                foreach (var i in new QRange(0L, (nVariables - 1L)))
#line hidden
                {
#line 353 "/Users/olasunkanmi/Documents/neu/spring_23/intro_to_quantum_computing/assignments/Kakuro Project/Kakuro.qs"
                    Message__.Apply(String.Format("X{0} = {1}", i, values[i]));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.SEC__ = this.__Factory__.Get<ICallable<(IQArray<Int64>,Int64), SEC>>(typeof(SEC));
            this.SolvePuzzle__ = this.__Factory__.Get<ICallable<(Int64,Int64,(Int64,Int64),IQArray<(Int64,Int64)>,IQArray<SEC>), (Boolean,IQArray<Int64>)>>(typeof(SolvePuzzle));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Start, QVoid, QVoid>(QVoid.Instance);
        }
    }
}